names(subResults)
names(subResults$results)
names(subResults[[1]]$results)
test = subResults[[1]]$results
head(test$results)
head(test$resultsA;;)
head(test$resultsAll)
head(test$resultsSummary)
s
as.character(s)
for (s in subgroups) {}
cat(s, ' and ', as.character(s), ' and ', as.character(subgroups[s]))
}
for (s in subgroups) {
cat(s, ' and ', as.character(s), ' and ', as.character(subgroups[s]))
}
s
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]][[r]]$Subgroup = s
}
subResults[[s]]
names(subResults[[s]])
head(subResults[[s]]$resultsAll)
names(subResults[[s]]$results)
subResultsSave = subResults
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]]$Subgroup = s
}
head(subResults[[s]]$results$resultsAll)
head(subResults[[s]]$results$resultsSummary)
head(subResults[[s]]$results$resultsSummaryYear)
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]])
}
head(subResults[[s]]$results$resultsSummaryYear)
subResults = subResultsSave
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]],
check.names=FALSE)
}
head(subResults[[s]]$results$resultsSummaryYear)
head(subResults[[s]]$results$resultsAll)
subResults = subResultsSave
s
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]],
check.names=FALSE)
}
s='MSM'
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]],
check.names=FALSE)
}
resultsAllList <- lapply(subResults, function(x) x$resultsAll)
str(resultsAllList)
head(resultsAllList[[1]])
head(resultsAllList[[2]])
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll)
head(resultsAllList[[2]])
head(resultsAllList[[1]])
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
head(resultsAllList[[1]])
test = do.call(resultsAllList, cbind)
test = do.call(cbind, resultsAllList)
head(test)
colnames(subResults$results$resultsAll)
colnames(subResults$MSM$results$resultsAll)
resultsAll <- cbind(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')],
do.call(cbind, resultsAllList))
head(resultsAll)
tail(resultsALl)
tail(resultsAll)
prev
for (s in subgroups) {
cat('\nSUBGROUP: ', s, '\n')
# Run the backcalculation for this subgroup, selecting
# the correct prevalence column if applicable
if (!is.null(prev)) {
subPrev <- prev[, c('Year', as.character(s))]
} else subPrev <- NULL
subResults[[s]] <- runBackCalc(testhist[testhist[,subvar]==s,],
intLength=diagInterval,
prev=subPrev)
# Add a subgroup identifier to the compiled results
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]],
check.names=FALSE)
}
}
}
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
names(resultsAllList)
head(resultsAllList[[1]])
head(resultsAllList[[2]])
tail(resultsAllList[[2]])
tail(resultsAllList[[1]])
names(subResults[[1]])
subResults[[1]]$N
subResults[[2]]$N
head(subResults[[1]]$results$resultsAll)
head(subResults[[2]]$results$resultsAll)
runBackCalc = function(testhist, intLength, cases=NULL, prev=NULL) {
if (!is.null(cases)) stop("In runBackCalc: not coded yet")
# Estimate TIDs
TIDs <- estimateTID(testhist$infPeriod, intLength=diagInterval)
cases <- names(TIDs)
# Diagnoses
diagCounts = tabulateDiagnoses(testhist, intLength=diagInterval)
# Initialize incidence and undiagnosed count lists
incidence <- vector(mode='list', length=length(cases))
names(incidence) <- cases
undiagnosed <- incidence
# Estimate incidence and undiagnosed
for (c in cases) {
cat('\nEstimating case', c, '...\n')
incidence[[c]] = estimateIncidence(y=diagCounts,
pid=TIDs[[c]]$pdffxn,
gamma=0.1,
verbose=FALSE)
undiagnosed[[c]] <- estimateUndiagnosed(incidence[[c]])
}
# Compile results
results <- combineResults(list(`Base Case`=list(incidence[['base_case']],
undiagnosed[['base_case']]),
`Upper Bound`=list(incidence[['upper_bound']],
undiagnosed[['upper_bound']])))
# True prevalence
if (!is.null(prev)) trueprev <- calcTruePrev(results, prev)
return(list(TIDs=TIDs, results=results, trueprev=trueprev, N=nrow(testhist)))
}
for (s in subgroups) {
cat('\nSUBGROUP: ', s, '\n')
# Run the backcalculation for this subgroup, selecting
# the correct prevalence column if applicable
if (!is.null(prev)) {
subPrev <- prev[, c('Year', as.character(s))]
} else subPrev <- NULL
subResults[[s]] <- runBackCalc(testhist[testhist[,subvar]==s,],
intLength=diagInterval,
prev=subPrev)
# Add a subgroup identifier to the compiled results
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]],
check.names=FALSE)
}
}
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
resultsAll <- cbind(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')],
do.call(cbind, resultsAllList))
head(resultsAll)
resultsAll$value <- apply(resultsAll[,subgroups],2,sum)
subgroups
head(resultsAll[,subgroups])
head(resultsAll[,as.character(subgroups)])
resultsAll$value <- apply(resultsAll[,as.character(subgroups)],2,sum)
head(resultsAll)
resultsAll$value <- apply(resultsAll[,as.character(subgroups)],1,sum)
head(resultsAll)
tail(resultsAll)
resultsSummary <- ddply(resultsAll, .(var, group), function(x) c(summary(x$value)))
head(resultsSummary)
resultsSummary <- within(resultsSummary, {
group <- as.character(group)
group[group=='Diagnoses and Incidence' &
var=='# Diagnosed'] <- 'Diagnoses'
group[group=='Diagnoses and Incidence'] <- 'Incidence'
})
colnames(resultsSummary)[1:2] <- c('Diagnoses/Case', 'Estimate')
head(resultsSummary)
names(subResults)
subResults[['Total-weighted']] <- resultsAll
names(subResults)
resultsSummaryYear <- ddply(transform(resultsAll, Year=floor(time)),
.(var, group, Year), function(x) c(summary(x$value)))
head(resultsSummaryYear)
resultsSummaryYear <- within(resultsSummaryYear, {
group <- as.character(group)
group[group=='Diagnoses and Incidence' &
var=='# Diagnosed'] <- 'Diagnoses'
group[group=='Diagnoses and Incidence'] <- 'Incidence'
})
colnames(resultsSummaryYear)[1:2] <- c('Diagnoses/Case', 'Estimate')
head(resultsSummaryYear)
tail(resultsSummaryYear)
names(subResults[[1]]$results)
subResults[['Total-weighted']] <- list(results=list(resultsAll=resultsAll,
resultsSummary=resultsSummary,
resultsSummaryYear=resultsSummaryYear))
prev
calcTruePrev
names(subResults[[1]])
trueprev_dat
trueprev_data
apply(trueprev_data[,subgroups],1,sum)
apply(trueprev_data[,subgroups],2,sum)
subgroups
trueprev_data[,subgroups]
apply(trueprev_data[,as.character(subgroups)],1,sum)
calcTruePrev(subResults[['Total-weighted']],
prev=data.frame(Year=prev$Year,
Total=apply(trueprev_data[,as.character(subgroups)],
1,sum)))
subResults[['Total-weighted']]
calcTruePrev(subResults[['Total-weighted']]$results,
prev=data.frame(Year=prev$Year,
Total=apply(trueprev_data[,as.character(subgroups)],
1,sum)))
subResults[['Total-weighted']]$trueprev <-
calcTruePrev(subResults[['Total-weighted']]$results,
prev=data.frame(Year=prev$Year,
Total=apply(trueprev_data[,as.character(subgroups)],
1,sum)))
lapply(subResults, names)
lapply(subResults, names(x$trueprev))
lapply(subResults, function(x) colnames(x$trueprev))
?ldply
?stack
trueprev <- do.call(rbind, lapply(names(subResults),
function(x) {
data.frame(Subgroup=x,
subResults[[x]]$trueprev,
check.names=FALSE)
}
}))
trueprev <- do.call(rbind, lapply(names(subResults),
function(x) {
data.frame(Subgroup=x,
subResults[[x]]$trueprev,
check.names=FALSE)
}))
head(trueprev)
table(trueprev$Subgroup)
subset(trueprev, select=-c('1st Qu.', 'Median', '3rd Qu.'))
subset(trueprev, select=c('1st Qu.', 'Median', '3rd Qu.'))
?subset
subset(trueprev, select=c('1st Qu.', 'Median', '3rd Qu.'), drop=TRUE)
head(trueprev[, !colnames(trueprev) %in% c('1st Qu.', 'Median', '3rd Qu.')])
runSubgroups = function(testhist, subvar, intLength, cases=NULL,
prev=NULL, save=NULL) {
if (!is.null(cases)) stop("In runSubgroups: not coded yet")
# Check that if prevalence is given, it is given for all the
# subgroups
subgroups <- unique(testhist[,subvar])
numsub <- length(subgroups)
if (sum(subgroups%in%colnames(prev))!=numsub) stop('In runSubGroups,
prevalence data are insufficient')
# Prepare to store results for each subgroup
subResults <- vector('list', length=(numsub+1))
names(subResults) <- c(subgroups, 'Total-weighted')
# Loop through subgroups
for (s in subgroups) {
cat('\nSUBGROUP: ', s, '\n')
# Run the backcalculation for this subgroup, selecting
# the correct prevalence column if applicable
if (!is.null(prev)) {
subPrev <- prev[, c('Year', as.character(s))]
} else subPrev <- NULL
subResults[[s]] <- runBackCalc(testhist[testhist[,subvar]==s,],
intLength=diagInterval,
prev=subPrev)
# Add a subgroup identifier to the compiled results
for (r in c('resultsAll', 'resultsSummary', 'resultsSummaryYear')) {
subResults[[s]]$results[[r]] = data.frame(Subgroup = s,
subResults[[s]]$results[[r]],
check.names=FALSE)
}
}
# Extract the results in order to get subgroup-weighted totals
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
resultsAll <- cbind(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')],
do.call(cbind, resultsAllList))
resultsAll$value <- apply(resultsAll[,as.character(subgroups)],1,sum)
# Summarize subgroup-weighted totals
# Data frame with summarized results
resultsSummary <- ddply(resultsAll, .(var, group), function(x) c(summary(x$value)))
resultsSummary <- within(resultsSummary, {
group <- as.character(group)
group[group=='Diagnoses and Incidence' &
var=='# Diagnosed'] <- 'Diagnoses'
group[group=='Diagnoses and Incidence'] <- 'Incidence'
})
colnames(resultsSummary)[1:2] <- c('Diagnoses/Case', 'Estimate')
# Data frame with summarized results by year
resultsSummaryYear <- ddply(transform(resultsAll, Year=floor(time)),
.(var, group, Year), function(x) c(summary(x$value)))
resultsSummaryYear <- within(resultsSummaryYear, {
group <- as.character(group)
group[group=='Diagnoses and Incidence' &
var=='# Diagnosed'] <- 'Diagnoses'
group[group=='Diagnoses and Incidence'] <- 'Incidence'
})
colnames(resultsSummaryYear)[1:2] <- c('Diagnoses/Case', 'Estimate')
# Save in subResults[['Total-weighted']]$results object
subResults[['Total-weighted']] <-
list(results=list(resultsAll=resultsAll,
resultsSummary=resultsSummary,
resultsSummaryYear=resultsSummaryYear))
if (!is.null(prev)) {
# Calculate total-weighted true prevalence
subResults[['Total-weighted']]$trueprev <-
calcTruePrev(subResults[['Total-weighted']]$results,
prev=data.frame(Year=prev$Year,
Total=apply(trueprev_data[,as.character(subgroups)],
1,sum)))
}
if (!is.null(save)) {
trueprev <- do.call(rbind, lapply(names(subResults),
function(x) {
data.frame(Subgroup=x,
subResults[[x]]$trueprev,
check.names=FALSE)
}))
write.csv(trueprev[, !colnames(trueprev) %in% c('1st Qu.', 'Median', '3rd Qu.')],
file=save,
row.names=FALSE)
}
return(subResults)
}
getwd()
workd
rm(list=ls())
#############################################################
# SETUP
#############################################################
rm(list=ls())
# TEMPORARY: SOURCE FUNCTIONS
source('/Users/jeanette/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R')
# Change year min and max
year_min <- 2005
year_max <- 2014
# Load libraries, data and data-cleaning file
# Eventually this function should return the cleaned dataset,
# but data-cleaning has the name hardcoded as msm and I'm not
# going to generalize that right now
setup_hivbackcalc(workd='/Users/jeanette/Dropbox/School/PhD/HIV_WA',
datafile='data/wa_backcalc_data_201506.csv',
source_these='analysis_WA/format_data.R',
package_updated=FALSE,
packagefile='HIVBackCalc/R/internal_fxns.R')
library(xtable)
#############################################################
# KNITR
#############################################################
library(knitr)
knit_hooks$set(inline = function(x) {
prettyNum(round(x,2), big.mark=",")
})
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center',
fig.show='hold', concordance=TRUE, external=TRUE,
tidy=TRUE, size='footnotesize', verbose=TRUE)
options(formatR.arrow=TRUE,width=80,digits=7)
read_chunk(file.path(workd,'analysis_WA/run_main.R'))
#read_chunk(file.path(workd,'analysis_WA/describe_data.R'))
variables <- c(`Age Group`='agecat5',
`Race/Ethnicity`='race',
`Mode of Transmission`='mode')
everHadNegTest_subgrouptab <- tabulate_everHadNegTest(dataf,
variables,
supercolumn=TRUE,
fullsample_row=TRUE)
everHadNegTest_racebydx <- tabulate_everHadNegTest(dataf,
list(c('mode', 'race')))
plot_diag
plot_diag <- plot_qtrDx(dataf)
everHadNegTest_time <- tabulate_everHadNegTest(dataf,'yearDx')
plot_time <- plot_everHadNegTest(everHadNegTest_time)
plot(TIDs, intLength=diagInterval,
cases = c('Base Case', 'Upper Bound'))
diagInterval = 0.25
TIDs <- estimateTID(dataf$infPeriod, intLength=diagInterval)
diagCounts = tabulateDiagnoses(dataf, intLength=diagInterval)
incidenceBase = estimateIncidence(y=diagCounts,
pid=TIDs[['base_case']]$pdffxn,
gamma=0.1,
verbose=FALSE)
incidenceUpper = estimateIncidence(y=diagCounts,
pid=TIDs[['upper_bound']]$pdffxn,
gamma=0.1,
verbose=FALSE)
undiagnosedBase <- estimateUndiagnosed(incidenceBase)
undiagnosedUpper <- estimateUndiagnosed(incidenceUpper)
results <- combineResults(list(`Base Case`=list(incidenceBase,
undiagnosedBase),
`Upper Bound`=list(incidenceUpper,
undiagnosedUpper)))
combineResults
names(results)
head(results$resultsSummaryYear)
names(results$resultsSummaryYear)
plot(results)
trueprev_data = read.csv(file.path(workd,'data/Reported_prevalence_2010-2014.csv'),
na.string="",stringsAsFactor=FALSE, check.names=FALSE)
trueprev <- calcTruePrev(results, subset(trueprev_data, select=c('Year', 'Total')))
subgroups <- runSubgroups(dataf,
subvar='mode2',
intLength=diagInterval,
prev=trueprev_data,
save=file.path(workd, 'analysis_WA/results/2015_trueprev.csv'))
source('~/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R', echo=TRUE)
subgroups <- runSubgroups(dataf,
subvar='mode2',
intLength=diagInterval,
prev=trueprev_data,
save=file.path(workd, 'analysis_WA/results/2015_trueprev.csv'))
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
resultsAll <- cbind(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')],
do.call(cbind, resultsAllList))
resultsAll$value <- apply(resultsAll[,as.character(subgroups)],1,sum)
head(resultsAll)
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
resultsAll <- cbind(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')],
do.call(cbind, resultsAllList))
head(resultsAll)
head(do.call(cbind, resultsAllList))
head(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')])
names(subResults[[1]])
names(subResults)
q
source('~/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R', echo=TRUE)
subgroups <- runSubgroups(dataf,
subvar='mode2',
intLength=diagInterval,
prev=trueprev_data,
save=file.path(workd, 'analysis_WA/results/2015_trueprev.csv'))
names(subResults)
head(subResults[[1]])
head(subResults[[2]])
head(subResults[[3]])
as.character(s)
subResults <- vector('list', length=(numsub+1))
names(subResults) <- c(subgroups, 'Total-weighted')
names(subResults)
subgroups
subResults <- vector('list', length=(numsub+1))
names(subResults) <- c(as.character(subgroups), 'Total-weighted')
subResults
source('~/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R', echo=TRUE)
source('~/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R', echo=TRUE)
subgroups <- runSubgroups(dataf,
subvar='mode2',
intLength=diagInterval,
prev=trueprev_data,
save=file.path(workd, 'analysis_WA/results/2015_trueprev.csv'))
subResults
source('~/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R', echo=TRUE)
subgroups <- runSubgroups(dataf,
subvar='mode2',
intLength=diagInterval,
prev=trueprev_data,
save=file.path(workd, 'analysis_WA/results/2015_trueprev.csv'))
names(subResults)
subResults
head(subResults[[1]]$resultsAll)
head(subResults[[1]]$results$resultsAll)
head(subResults[[1]]$results$resultsSummary)
head(subResults[[1]]$results$resultsSummary)
head(subResults[[1]]$results$resultsSummaryYear)
resultsAllList <- lapply(subResults, function(x) x$results$resultsAll$value)
resultsAll <- cbind(subResults[[1]]$results$resultsAll[,c('time', 'group', 'var')],
do.call(cbind, resultsAllList))
head(resultsAll)
resultsAll$value <- apply(resultsAll[,as.character(subgroups)],1,sum)
head(resultsAll)
resultsSummary <- ddply(resultsAll, .(var, group), function(x) c(summary(x$value)))
resultsSummary <- within(resultsSummary, {
group <- as.character(group)
group[group=='Diagnoses and Incidence' &
var=='# Diagnosed'] <- 'Diagnoses'
group[group=='Diagnoses and Incidence'] <- 'Incidence'
})
colnames(resultsSummary)[1:2] <- c('Diagnoses/Case', 'Estimate')
head(resultsSummary)
resultsSummaryYear <- ddply(transform(resultsAll, Year=floor(time)),
.(var, group, Year), function(x) c(summary(x$value)))
resultsSummaryYear <- within(resultsSummaryYear, {
group <- as.character(group)
group[group=='Diagnoses and Incidence' &
var=='# Diagnosed'] <- 'Diagnoses'
group[group=='Diagnoses and Incidence'] <- 'Incidence'
})
colnames(resultsSummaryYear)[1:2] <- c('Diagnoses/Case', 'Estimate')
head(resultsSummaryYear)
subResults[['Total-weighted']] <-
list(results=list(resultsAll=resultsAll,
resultsSummary=resultsSummary,
resultsSummaryYear=resultsSummaryYear))
subResults[['Total-weighted']]$trueprev <-
calcTruePrev(subResults[['Total-weighted']]$results,
prev=data.frame(Year=prev$Year,
Total=apply(trueprev_data[,as.character(subgroups)],
1,sum)))
head(subResults[['Total-weighted']]$trueprev)
tail(subResults[['Total-weighted']]$trueprev)
trueprev <- do.call(rbind, lapply(names(subResults),
function(x) {
data.frame(Subgroup=x,
subResults[[x]]$trueprev,
check.names=FALSE)
}))
head(trueprev)
tail(trueprev)
save
write.csv(trueprev[, !colnames(trueprev) %in% c('1st Qu.', 'Median', '3rd Qu.')],
file=save,
row.names=FALSE)
